Use something like a cursor to represent the range that has no duplicate characters.

Here is an example:
	'abcabcbb'

First cursor: pointer = 0, go through the string letter by letter, 'a', put 'a' 
into the char-position-dictionary {'a':0}, 'b'-> {'a':0, 'b'->1}, 'c'->{'a':0, 'b'->1, 'c'->2};

Then it comes to the second 'a', it is the duplicate character on the substr(0,3);
Check the dictionary and find out that 'a' has the index in the dictionary and 
the index is 0, which is in the range of (0, 3), duplicate!

Then we put the cursor to the next position of the first 'a', which promises that 
(1, 3) has no duplicate, then refresh the dictionary to {'a': 3, 'b': 1, 'c': 2};

Do the passing to the last character.

Two things to be noticed:
1. If no duplicated character is found, then output (len(s)-pointer) (This is possibly the last substr in this algorithm)
2. If the index of the character is found in the dictionary but the index is smaller
then the current cursor, then this case should be omitted and refresh the dictionary
using the new character index.
